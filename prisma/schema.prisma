// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Agency represents a real estate agency
model Agency {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  website               String?
  phone                 String?
  registeration_number  String?
  vat_number            String?
  email                 String?
  address_street_full   String?
  address_street        String?
  address_street_number String?
  address_optional      String?
  address_city          String?
  address_state         String?
  address_postal_code   String?
  address_suburb        String?
  address_country       String?
  address_sub_state     String?
  address_lat           Float?
  address_long          Float?
  images                String[]

  // Define a one-to-many relationship with branches
  branches Branch[]
  Listing  Listing[]
}

// Branch represents a branch of an agency
model Branch {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  agency_id    String  @db.ObjectId
  location     String
  contact_info String?

  // Define a one-to-many relationship with agents
  agents Agent[]
  // Define a many-to-one relationship with agencies
  agency Agency  @relation(fields: [agency_id], references: [id])
}

// Agent represents a real estate agent
model Agent {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  branch_id    String  @db.ObjectId
  name         String
  contact_info String?

  // Define a many-to-one relationship with branches
  branch  Branch    @relation(fields: [branch_id], references: [id])
  Listing Listing[]
}

// Property represents a property listing
model Property {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  address     String
  price       Float
  description String?

  // Define a many-to-many relationship with agencies through listings
  listings Listing[]
}

// Listing represents a property listing by an agency
model Listing {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  property_id  String    @db.ObjectId
  agency_id    String    @db.ObjectId
  agent_id     String    @db.ObjectId
  lister_type  String
  sole_mandate Boolean
  start_date   DateTime
  end_date     DateTime?

  // Define a many-to-one relationship with properties
  property Property @relation(fields: [property_id], references: [id])
  // Define a many-to-one relationship with agencies
  agency   Agency   @relation(fields: [agency_id], references: [id])
  // Define a many-to-one relationship with agents
  agent    Agent    @relation(fields: [agent_id], references: [id])

  // Define a one-to-many relationship with property sale history
  sales Sale[]
}

// Sale represents a property sale record
model Sale {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  listing_id String   @db.ObjectId
  sale_date  DateTime
  sale_price Float
  buyer_id   Int
  seller_id  Int

  // Define a many-to-one relationship with listings
  listing Listing @relation(fields: [listing_id], references: [id])
}
